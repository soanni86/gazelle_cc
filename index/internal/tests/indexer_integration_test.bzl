"""
Framework for testing indexer integration in end to end test
"""

load("@rules_go//go:def.bzl", "go_test")


def indexer_integration_test(
        name,
        gazelle_binary_path,
        indexer_binary_path,
        srcs = [],
        data = [],
        deps = [],
        tags = [],
        **kwargs):
    """Bazel macro rule for testing indexer integration

    Assumes following layout:
    - testcases/
    |--- <test_case_dir_0>/
    |  |-- BUILD
    |  |-- MODULE.bazel
    |  |-- expected.ccindex
    |  |-- **/*.{c,cc,cpp,h,hpp} (buildable C sources)
    |--- <test_case_dir_n>/
    |  | -- ....
    Indexer needs to implement the common flags listed in index/internal/indexer/cli/cli.go and write the output to 'generated.ccidx' file (specified by --output flag).
    Generated index would be compared with `expected.ccindex`
    As the last step test invoked `bazel build //...` in the directory on the targets generated by the gazelle_binary
   

    Args:
        indexer_binary_path:  indexer binary that would be invoked by the test. 
        gazelle_binary_path: gazelle_binary that would be invoked on the build. It would be invoked in the test_case directory. It needs to enable gazelle_cc extension.
        name: Name of the go_test rule
        srcs: Test sources.  At least 1 of `srcs` needs to invoke `ExecuteIndexerIntegrationTest(*testing.T, IndexerIntegration)` function. 
        data: Additional data resources passed to go_test rule
        deps: Additional dependencies passed to go_test rule
        tags: Additional tags passed to go_test rule
        **kwargs: Remaining attributes passed to go_test rule
    """
    go_test(
        name = name,
        timeout = "eternal",
        srcs = srcs,
        args = [
            "--gazelle_binary_path=$(rlocationpath %s)" % gazelle_binary_path,
            "--indexer_binary_path=$(rlocationpath %s)" % indexer_binary_path,
        ],
        data = data + [gazelle_binary_path, indexer_binary_path, ":testcases"],
        deps = deps + [
            "//index/internal/tests",
            "@rules_go//go/runfiles",
        ],
        tags = tags + ["manual"],
        **kwargs
    )
